{"version":3,"file":"static/js/885.d39af3bf.chunk.js","mappings":"mTAEMA,EAAU,mCAIT,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,yHAA2C,GAA3C,SACkBC,EAAAA,EAAAA,IAAUD,GAD5B,cACCE,EADD,yBAEEA,EAASC,MAFX,mEAKA,SAASC,IACd,OAAOL,EAAU,+BAAD,OAAgCD,GACjD,CAEM,SAASO,EAAgBC,GAC9B,OAAOP,EAAU,yBAAD,OAA0BD,EAA1B,kBAA2CQ,GAC5D,CAEM,SAASC,EAAeC,GAC7B,OAAOT,EAAU,UAAD,OAAWS,EAAX,oBAA8BV,EAA9B,mBACjB,CAEM,SAASW,EAAgBD,GAC9B,OAAOT,EAAU,UAAD,OACJS,EADI,4BACuBV,EADvB,mBAGjB,CAEM,SAASY,EAAgBF,GAC9B,OAAOT,EAAU,UAAD,OACJS,EADI,4BACuBV,EADvB,mBAGjB,CA7BDG,EAAAA,EAAAA,SAAAA,QAAyB,+B,yKCWZU,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1B,OACE,iCACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,IACwB,OAAtBD,EAAME,YAAN,8CAC2CF,EAAME,aAC7CC,EAENC,IAAI,MAEN,UAAC,KAAD,YACE,4BACE,UAAC,KAAD,WACGJ,EAAMK,MADT,eACqBL,EAAMM,aAAaC,MAAM,EAAG,GADjD,SAGA,UAAC,KAAD,0BAAmBC,KAAKC,MAA2B,GAArBT,EAAMU,cAApC,WAEF,4BACE,SAAC,KAAD,wBACA,SAAC,KAAD,UAAOV,EAAMW,eAEf,4BACE,SAAC,KAAD,sBACA,SAAC,KAAD,UAAOX,EAAMY,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,mBAInD,UAAC,KAAD,YACE,SAAC,KAAD,CAAgBC,GAAG,OAAnB,mBACA,SAAC,KAAD,CAAgBA,GAAG,UAAnB,yBAEF,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,E,UChBD,EA9BqB,WAAO,IAAD,IACnBC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOtB,EAAP,KAAcuB,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAcnD,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,8GAEMtC,EAAAA,EAAAA,IAAe6B,GAFrB,OAEPjC,EAFO,OAGbgC,EAAShC,GAHI,gDAKb6B,EAAS,KACTc,QAAQC,IAAR,MANa,yDAAH,qDASdF,GACD,GAAE,CAACT,EAAIJ,KAEN,iCACE,UAAC,KAAD,CAAUH,GAAIW,EAAYQ,QAA1B,WACE,SAAC,MAAD,CAAoBC,KAAM,KAD5B,aAICrC,IAAS,SAACD,EAAD,CAAWC,MAAOA,MAGjC,C","sources":["components/Services.jsx","components/Movieinfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '2a9c1d08031f8c725807d91372c6f53b';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getMovies(endpoint, query = '') {\n  const response = await axios.get(endpoint);\n  return response.data;\n}\n\nexport function getTrendingMovies() {\n  return getMovies(`/trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport function getSearchMovies(query) {\n  return getMovies(`/search/movie?api_key=${API_KEY}&query=${query}`);\n}\n\nexport function getSingleMovie(movieId) {\n  return getMovies(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n}\n\nexport function getMovieCredits(movieId) {\n  return getMovies(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function getMovieReviews(movieId) {\n  return getMovies(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n","import { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { Outlet } from 'react-router-dom';\nimport {\n  Info,\n  Img,\n  SubInfo,\n  InfoWrapper,\n  Text,\n  AdditionalLink,\n  MovieName,\n  TitleInfo,\n} from './Globalstyle';\nimport poster from 'images/no_movie_pic.png';\n\nexport const MovieInfo = ({ movie }) => {\n  return (\n    <>\n      <Info>\n        <Img\n          src={\n            movie.poster_path !== null\n              ? `https://image.tmdb.org/t/p/original/${movie.poster_path}`\n              : poster\n          }\n          alt=\"\"\n        />\n        <InfoWrapper>\n          <div>\n            <MovieName>\n              {movie.title} {`(${movie.release_date.slice(0, 4)})`}\n            </MovieName>\n            <Text>User score: {Math.round(movie.vote_average * 10)}%</Text>\n          </div>\n          <div>\n            <TitleInfo>Overview</TitleInfo>\n            <Text>{movie.overview}</Text>\n          </div>\n          <div>\n            <TitleInfo>Genres</TitleInfo>\n            <Text>{movie.genres.map(genre => genre.name).join()}</Text>\n          </div>\n        </InfoWrapper>\n      </Info>\n      <SubInfo>\n        <AdditionalLink to=\"cast\">Cast</AdditionalLink>\n        <AdditionalLink to=\"reviews\">Reviews</AdditionalLink>\n      </SubInfo>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }).isRequired,\n};\n","import { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { getSingleMovie } from 'components/Services';\nimport { MovieInfo } from '../components/Movieinfo';\nimport { LinkBack } from '../components/Globalstyle';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\n\nconst MovieDetails = () => {\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        const data = await getSingleMovie(id);\n        setMovie(data);\n      } catch (error) {\n        navigate('*');\n        console.log(error);\n      }\n    };\n    getMovie();\n  }, [id, navigate]);\n  return (\n    <>\n      <LinkBack to={backLinkRef.current}>\n        <AiOutlineArrowLeft size={16} />\n        Go back\n      </LinkBack>\n      {movie && <MovieInfo movie={movie} />}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","getMovies","endpoint","axios","response","data","getTrendingMovies","getSearchMovies","query","getSingleMovie","movieId","getMovieCredits","getMovieReviews","MovieInfo","movie","src","poster_path","poster","alt","title","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","join","to","Suspense","fallback","navigate","useNavigate","useState","setMovie","id","useParams","location","useLocation","backLinkRef","useRef","state","from","useEffect","getMovie","console","log","current","size"],"sourceRoot":""}